# Unit tests for COST-001: Unattached Managed Disks Check

BeforeAll {
    # Import the module
    $modulePath = "$PSScriptRoot/../../../modules/WafScanner.psm1"
    Import-Module $modulePath -Force
}

Describe 'COST-001: Unattached Managed Disks Check' {
    BeforeAll {
        # Load the check
        $checkPath = "$PSScriptRoot/../../../modules/Pillars/CostOptimization/COST-001/Invoke.ps1"
        . $checkPath
        
        # Get check from registry
        $script:Check = $script:CheckRegistry | Where-Object CheckId -eq 'COST-001'
    }
    
    Context 'Check Registration' {
        It 'Should be registered in the check registry' {
            $script:Check | Should -Not -BeNullOrEmpty
        }
        
        It 'Should have CheckId COST-001' {
            $script:Check.CheckId | Should -Be 'COST-001'
        }
        
        It 'Should have correct pillar' {
            $script:Check.Pillar | Should -Be 'CostOptimization'
        }
        
        It 'Should have Medium severity' {
            $script:Check.Severity | Should -Be 'Medium'
        }
        
        It 'Should have Low remediation effort' {
            $script:Check.RemediationEffort | Should -Be 'Low'
        }
        
        It 'Should have a title' {
            $script:Check.Title | Should -Not -BeNullOrEmpty
            $script:Check.Title | Should -Match 'unattached'
        }
        
        It 'Should have correct tags' {
            $script:Check.Tags | Should -Contain 'ManagedDisks'
            $script:Check.Tags | Should -Contain 'CostOptimization'
        }
    }
    
    Context 'Check Execution - Pass Scenarios' {
        BeforeEach {
            # Mock no unattached disks
            Mock Invoke-AzResourceGraphQuery {
                return @()
            }
        }
        
        It 'Should return Pass when no unattached disks exist' {
            $result = & $script:Check.ScriptBlock -SubscriptionId 'test-sub-id'
            
            $result.Status | Should -Be 'Pass'
            $result.CheckId | Should -Be 'COST-001'
            $result.Message | Should -Match 'No unattached managed disks found'
        }
    }
    
    Context 'Check Execution - Fail Scenarios' {
        BeforeEach {
            # Mock unattached disks
            Mock Invoke-AzResourceGraphQuery {
                return @(
                    [PSCustomObject]@{
                        id = '/subscriptions/sub1/resourceGroups/rg1/providers/Microsoft.Compute/disks/disk1'
                        name = 'disk1'
                        location = 'eastus'
                        resourceGroup = 'rg1'
                        diskSizeGB = 128
                        diskTier = 'Premium_LRS'
                        diskType = 'Premium SSD'
                        createdTime = '2024-01-15T10:00:00Z'
                    },
                    [PSCustomObject]@{
                        id = '/subscriptions/sub1/resourceGroups/rg1/providers/Microsoft.Compute/disks/disk2'
                        name = 'disk2'
                        location = 'westus'
                        resourceGroup = 'rg1'
                        diskSizeGB = 512
                        diskTier = 'Standard_LRS'
                        diskType = 'Standard HDD'
                        createdTime = '2024-02-01T10:00:00Z'
                    }
                )
            }
        }
        
        It 'Should return Fail when unattached disks exist' {
            $result = & $script:Check.ScriptBlock -SubscriptionId 'test-sub-id'
            
            $result.Status | Should -Be 'Fail'
            $result.CheckId | Should -Be 'COST-001'
            $result.AffectedResources | Should -HaveCount 2
        }
        
        It 'Should identify all affected disks' {
            $result = & $script:Check.ScriptBlock -SubscriptionId 'test-sub-id'
            
            $result.AffectedResources | Should -Contain '/subscriptions/sub1/resourceGroups/rg1/providers/Microsoft.Compute/disks/disk1'
            $result.AffectedResources | Should -Contain '/subscriptions/sub1/resourceGroups/rg1/providers/Microsoft.Compute/disks/disk2'
        }
        
        It 'Should calculate estimated monthly cost' {
            $result = & $script:Check.ScriptBlock -SubscriptionId 'test-sub-id'
            
            $result.Message | Should -Match '\$\d+\.\d{2}/month'
        }
        
        It 'Should include recommendation' {
            $result = & $script:Check.ScriptBlock -SubscriptionId 'test-sub-id'
            
            $result.Recommendation | Should -Not -BeNullOrEmpty
            $result.Recommendation | Should -Match 'Review and remove'
        }
        
        It 'Should include remediation script' {
            $result = & $script:Check.ScriptBlock -SubscriptionId 'test-sub-id'
            
            $result.RemediationScript | Should -Not -BeNullOrEmpty
            $result.RemediationScript | Should -Match 'Get-AzDisk'
        }
        
        It 'Should include metadata with cost details' {
            $result = & $script:Check.ScriptBlock -SubscriptionId 'test-sub-id'
            
            $result.Metadata | Should -Not -BeNullOrEmpty
            $result.Metadata.TotalDisks | Should -Be 2
            $result.Metadata.EstimatedMonthlyCost | Should -BeGreaterThan 0
            $result.Metadata.EstimatedAnnualSavings | Should -BeGreaterThan 0
        }
    }
    
    Context 'Cost Calculation' {
        BeforeEach {
            # Mock disks with different types for cost calculation
            Mock Invoke-AzResourceGraphQuery {
                return @(
                    [PSCustomObject]@{
                        id = '/subscriptions/sub1/resourceGroups/rg1/providers/Microsoft.Compute/disks/premium-disk'
                        name = 'premium-disk'
                        location = 'eastus'
                        resourceGroup = 'rg1'
                        diskSizeGB = 100
                        diskTier = 'Premium_LRS'
                        diskType = 'Premium SSD'
                        createdTime = '2024-01-01T00:00:00Z'
                    }
                )
            }
        }
        
        It 'Should calculate cost for Premium SSD' {
            $result = & $script:Check.ScriptBlock -SubscriptionId 'test-sub-id'
            
            # 100 GB * 0.135 = $13.50/month
            $result.Metadata.EstimatedMonthlyCost | Should -BeGreaterThan 10
            $result.Metadata.EstimatedMonthlyCost | Should -BeLessThan 20
        }
        
        It 'Should calculate annual savings' {
            $result = & $script:Check.ScriptBlock -SubscriptionId 'test-sub-id'
            
            $monthlyCost = $result.Metadata.EstimatedMonthlyCost
            $annualSavings = $result.Metadata.EstimatedAnnualSavings
            
            $annualSavings | Should -Be ($monthlyCost * 12)
        }
    }
    
    Context 'Disk Type Grouping' {
        BeforeEach {
            # Mock multiple disk types
            Mock Invoke-AzResourceGraphQuery {
                return @(
                    [PSCustomObject]@{
                        id = '/subscriptions/sub1/resourceGroups/rg1/providers/Microsoft.Compute/disks/disk1'
                        name = 'disk1'
                        location = 'eastus'
                        resourceGroup = 'rg1'
                        diskSizeGB = 128
                        diskTier = 'Premium_LRS'
                        diskType = 'Premium SSD'
                        createdTime = '2024-01-01T00:00:00Z'
                    },
                    [PSCustomObject]@{
                        id = '/subscriptions/sub1/resourceGroups/rg1/providers/Microsoft.Compute/disks/disk2'
                        name = 'disk2'
                        location = 'eastus'
                        resourceGroup = 'rg1'
                        diskSizeGB = 256
                        diskTier = 'Premium_LRS'
                        diskType = 'Premium SSD'
                        createdTime = '2024-01-01T00:00:00Z'
                    },
                    [PSCustomObject]@{
                        id = '/subscriptions/sub1/resourceGroups/rg1/providers/Microsoft.Compute/disks/disk3'
                        name = 'disk3'
                        location = 'eastus'
                        resourceGroup = 'rg1'
                        diskSizeGB = 512
                        diskTier = 'Standard_LRS'
                        diskType = 'Standard HDD'
                        createdTime = '2024-01-01T00:00:00Z'
                    }
                )
            }
        }
        
        It 'Should group disks by type in metadata' {
            $result = & $script:Check.ScriptBlock -SubscriptionId 'test-sub-id'
            
            $result.Metadata.DisksByType | Should -Not -BeNullOrEmpty
        }
        
        It 'Should include breakdown in recommendation' {
            $result = & $script:Check.ScriptBlock -SubscriptionId 'test-sub-id'
            
            $result.Recommendation | Should -Match 'Breakdown:'
        }
    }
    
    Context 'Top Costly Disks' {
        BeforeEach {
            # Mock many disks with varying costs
            Mock Invoke-AzResourceGraphQuery {
                return @(
                    [PSCustomObject]@{
                        id = '/subscriptions/sub1/resourceGroups/rg1/providers/Microsoft.Compute/disks/expensive-disk'
                        name = 'expensive-disk'
                        location = 'eastus'
                        resourceGroup = 'rg1'
                        diskSizeGB = 1024
                        diskTier = 'Premium_LRS'
                        diskType = 'Premium SSD'
                        createdTime = '2024-01-01T00:00:00Z'
                    },
                    [PSCustomObject]@{
                        id = '/subscriptions/sub1/resourceGroups/rg1/providers/Microsoft.Compute/disks/cheap-disk'
                        name = 'cheap-disk'
                        location = 'eastus'
                        resourceGroup = 'rg1'
                        diskSizeGB = 32
                        diskTier = 'Standard_LRS'
                        diskType = 'Standard HDD'
                        createdTime = '2024-01-01T00:00:00Z'
                    }
                )
            }
        }
        
        It 'Should identify top costly disks in metadata' {
            $result = & $script:Check.ScriptBlock -SubscriptionId 'test-sub-id'
            
            $result.Metadata.TopCostlyDisks | Should -Not -BeNullOrEmpty
        }
    }
    
    Context 'Check Execution - Error Scenarios' {
        BeforeEach {
            # Mock Resource Graph query failure
            Mock Invoke-AzResourceGraphQuery {
                throw "Network timeout while querying Resource Graph"
            }
        }
        
        It 'Should return Error status on exception' {
            $result = & $script:Check.ScriptBlock -SubscriptionId 'test-sub-id'
            
            $result.Status | Should -Be 'Error'
            $result.CheckId | Should -Be 'COST-001'
        }
        
        It 'Should include error message' {
            $result = & $script:Check.ScriptBlock -SubscriptionId 'test-sub-id'
            
            $result.Message | Should -Match 'Failed to execute check'
        }
    }
    
    Context 'Integration with Helper Functions' {
        BeforeEach {
            Mock Invoke-AzResourceGraphQuery {
                return @(
                    [PSCustomObject]@{
                        id = '/subscriptions/sub1/resourceGroups/rg1/providers/Microsoft.Compute/disks/disk1'
                        name = 'disk1'
                        location = 'eastus'
                        resourceGroup = 'rg1'
                        diskSizeGB = 128
                        diskTier = 'Premium_LRS'
                        diskType = 'Premium SSD'
                        createdTime = '2024-01-01T00:00:00Z'
                    }
                )
            }
        }
        
        It 'Should call Invoke-AzResourceGraphQuery with correct parameters' {
            $null = & $script:Check.ScriptBlock -SubscriptionId 'test-sub-id'
            
            Should -Invoke Invoke-AzResourceGraphQuery -Times 1 -ParameterFilter {
                $Query -match 'microsoft.compute/disks' -and
                $Query -match 'Unattached' -and
                $SubscriptionId -eq 'test-sub-id'
            }
        }
        
        It 'Should use caching' {
            $null = & $script:Check.ScriptBlock -SubscriptionId 'test-sub-id'
            
            Should -Invoke Invoke-AzResourceGraphQuery -Times 1 -ParameterFilter {
                $UseCache -eq $true
            }
        }
    }
    
    Context 'Recommendation Content' {
        BeforeEach {
            Mock Invoke-AzResourceGraphQuery {
                return @(
                    [PSCustomObject]@{
                        id = '/subscriptions/sub1/resourceGroups/rg1/providers/Microsoft.Compute/disks/disk1'
                        name = 'disk1'
                        location = 'eastus'
                        resourceGroup = 'rg1'
                        diskSizeGB = 100
                        diskTier = 'Premium_LRS'
                        diskType = 'Premium SSD'
                        createdTime = '2024-01-01T00:00:00Z'
                    }
                )
            }
        }
        
        It 'Should include snapshot recommendation' {
            $result = & $script:Check.ScriptBlock -SubscriptionId 'test-sub-id'
            
            $result.Recommendation | Should -Match 'snapshot'
        }
        
        It 'Should include annual savings estimate' {
            $result = & $script:Check.ScriptBlock -SubscriptionId 'test-sub-id'
            
            $result.Recommendation | Should -Match 'Annual potential savings'
        }
        
        It 'Should warn about disaster recovery' {
            $result = & $script:Check.ScriptBlock -SubscriptionId 'test-sub-id'
            
            $result.Recommendation | Should -Match 'disaster recovery'
        }
    }
    
    Context 'Remediation Script Content' {
        BeforeEach {
            Mock Invoke-AzResourceGraphQuery {
                return @(
                    [PSCustomObject]@{
                        id = '/subscriptions/sub1/resourceGroups/rg1/providers/Microsoft.Compute/disks/disk1'
                        name = 'disk1'
                        location = 'eastus'
                        resourceGroup = 'rg1'
                        diskSizeGB = 100
                        diskTier = 'Premium_LRS'
                        diskType = 'Premium SSD'
                        createdTime = '2024-01-01T00:00:00Z'
                    }
                )
            }
        }
        
        It 'Should include snapshot creation option' {
            $result = & $script:Check.ScriptBlock -SubscriptionId 'test-sub-id'
            
            $result.RemediationScript | Should -Match 'New-AzSnapshotConfig'
            $result.RemediationScript | Should -Match 'New-AzSnapshot'
        }
        
        It 'Should include disk deletion option' {
            $result = & $script:Check.ScriptBlock -SubscriptionId 'test-sub-id'
            
            $result.RemediationScript | Should -Match 'Remove-AzDisk'
        }
        
        It 'Should include alert setup option' {
            $result = & $script:Check.ScriptBlock -SubscriptionId 'test-sub-id'
            
            $result.RemediationScript | Should -Match 'alert'
        }
    }
    
    Context 'Null and Empty Value Handling' {
        BeforeEach {
            # Mock disks with potential null values
            Mock Invoke-AzResourceGraphQuery {
                return @(
                    [PSCustomObject]@{
                        id = '/subscriptions/sub1/resourceGroups/rg1/providers/Microsoft.Compute/disks/disk1'
                        name = 'disk1'
                        location = 'eastus'
                        resourceGroup = 'rg1'
                        diskSizeGB = 0
                        diskTier = $null
                        diskType = 'Standard HDD'
                        createdTime = $null
                    }
                )
            }
        }
        
        It 'Should handle disks with zero size' {
            $result = & $script:Check.ScriptBlock -SubscriptionId 'test-sub-id'
            
            # Should not throw error
            $result.Status | Should -BeIn @('Pass', 'Fail', 'Error')
        }
    }
    
    Context 'Message Formatting' {
        BeforeEach {
            Mock Invoke-AzResourceGraphQuery {
                return @(
                    [PSCustomObject]@{
                        id = '/subscriptions/sub1/resourceGroups/rg1/providers/Microsoft.Compute/disks/disk1'
                        name = 'disk1'
                        location = 'eastus'
                        resourceGroup = 'rg1'
                        diskSizeGB = 100
                        diskTier = 'Premium_LRS'
                        diskType = 'Premium SSD'
                        createdTime = '2024-01-01T00:00:00Z'
                    }
                )
            }
        }
        
        It 'Should include disk count in message' {
            $result = & $script:Check.ScriptBlock -SubscriptionId 'test-sub-id'
            
            $result.Message | Should -Match 'Found \d+ unattached'
        }
        
        It 'Should format cost with 2 decimal places' {
            $result = & $script:Check.ScriptBlock -SubscriptionId 'test-sub-id'
            
            $result.Message | Should -Match '\$\d+\.\d{2}'
        }
    }
}
```
